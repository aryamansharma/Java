core Java:
1. to print we use System.out.print();
2. semi-colon at the end is important;
3. whenever we want to print string we pass them in double quotes("") not in single quotes('');
    eg : 
        * System.out.print('hello world'); // Not acceptable.
        * System.out.print("Hello world"); // acceptable.
4. to run java code there are 2 steps : // make sure to run these 2 commands in the folder where your Java file is.
    1. compile : javac filename.java
    2. run : java classname // without file extension
5. structure of a Java program : 
    class Hello { // classname should always be starting with capital
    public static void main(String a[]) { // this String argument is very important
            System.out.print("hello workd");
        }
    }

6. How a Java code is run : 
    1. we write the code in Java.
    2. that java code is converted to byte code by compiler when we run javac filename.java
    3. after compilation a file is created with classname of the class containing the main method.
    4. run java classname
    5. that code is executed on JVM, which is installed in our machine.

7. some core points about Java : 
    1. Java is platform independent.
    2. JVM is platform dependent.
    3. the main method is entry point of a code which is required by JVM, without this main method the code will not run. 
        this is like a starting point of our program.
    4. basically a device hardware will be having the OS,
        and on that OS we install JDK which will be containing JRE(Java Runtime Environment) which will be containg the JVM.
    5. JRE contains JVM and libraries and Runtime.

8. difference between print and println is that println prints the output in a different line while print prints the output in a single line.
    for eg : 
        for println : 
            System.out.println("Hello world!");  
            System.out.println("Hello world!");
        output : 
            Hello world!
            Hello world!
        for print : 
            System.out.print("Hello world!");
            System.out.print("Hello world!");
        output : 
            Hello world!Hello world!

9. Data types:
    primitive data types : 
        1. integers :
            integer types : int, byte, short, long
            NOTE : while workign with long we need to put 'l' at the end,
                like this : long num = 1223l;
        2. float : 
            float types : double, float
            NOTE : while working with float type values, double is the default data type for Java. 
                    double num = 5.6; // this is valid
                    float num = 5.6; // this is invalid  
                so if you want to create a variable with float data type, you have to do something like this :
                    float num = 5.6f;
        3. characters : it can only store a single character.
            character type : char
            NOTE : char only accepts single quotes(''), it will not accept double quotes(""), they are for strings.
        4. boolean :
            boolean type : bool
            NOTE : boolean only accepts true and false, no 1 or 0.
    
10. Literals: literals are just values of a variable.
    1. int a = 10_00_000; // this is valid in Java.
        System.out.println(a);
        output : 1000000;
    
    2. public static void main(String[] args) {
        char c = 'a';
        c++; // this c++ will increment the 'a' to 'b';
        System.out.println(c++); // this c++ will increment the 'b' to 'c';
        System.out.println(c);
        }

    3. if we do something like this : 
        public static void main(String[] args) {
            double num = 56;
            System.out.println(num);
        }

        output : 56.0 // double will convert the 56 to 56.0;

11. type casting and conversion :
    1. when we explicitly convert the type it is known as type casting.
        eg : byte a = 2;
             int b = 1;
             a=b; // this will not work byte range is smaller than int.
             a = (byte) b; // type casting
             b=a; // this will work because byte range is smaller than int.
    2. when we implicitly convert the type it is known as type conversion.
            byte a = 2;
            int b = 1;
            b=a; // type conversion.
    3. type promotion : when automatically converts the type of a lower data type type to higher data type while evaluating an expression : 
        byte a = 10;
        byte b = 30;
        int result = a * b; // this will give 300 of int because of type promotion.

    Note : 
        1.
            float num = 5.6f;
            int a = 5;
            a = num; // this will throw an error because we cannot assign a float value to an int.
            a = (int) num; type casting. 
            System.out.println(a);
            output : 5; // it will lose the decimal part of the number.  
        2.    
            byte a = 2;
            int b = 257;
            a = (byte) b;
            System.out.println(a);
            output : 1 // because it will perform a modulus operation with 256.

12. relational operators : 
    1. for equality check we use : '=='
        eg : int a = 1;
             int b = 2;
             System.out.println(a==b); 
             output : true;

13. if else :
    1. Java is not an identation depent language.
    2. if we have 1 line of code to execute in an if or else block we can skip curly braces but if we have more than line of code in any of the if or else block we need to use curly braces. just like Javascript
        eg : 

            if(true) System.out.println('a');
            else System.out.println('b');

            if(true) {
                System.out.println('a');
                System.out.println('b');
            } else {
                System.out.println('c');
                System.out.println('d');
            }

OOP in Java :
1. classes and objects in Java :
    * For every method we need to provide access modifiers.

    class Calculator {

        // this int here is the return type of this method.
        public int add(int n1, int n2) {
            int result = n1+n2;
            return 
        }
        
        // if we dont a method to return anything we use void, like this
        public void play(){ // this method will return anything

        }

        // if we want to specify the return type as String for a method, we use it like this
        public String abc() { // this String we use to specify the return of this method

        }
    }

    public class Demo {
        public static void main(String a[]) {
            int num1 = 1;
            int num2 = 2;

            // this is how we create an object of a class in Java.
            // this Calculator will be the type of the variable(object in this case).
            // calc will be the object or we can say it will be a reference variable.
            // Calculator() will be used to create object of this Calculator class.
            Calculator calc = new Calculator();
            int result = calc.add(num1+num2);
            System.out.println(result);
        }
    }

2. method overloading : when we have 2 implementation of a method with the exact same name, 
    the only difference will be between the paramenters adn the type of paramenters.

    class Abc {
        public int add(int a, int b, int c) {
            return a+b+c;
        }
        public int add(int a, int b) {
            return a+b;
        }
    }

    class Main {
        public static void main(String a[]) {
            Abc obj = new Abc();
            obj.add(1,2,3); //this will call the 1st implementation
            obj.add(1,2); // this will call the 2nd implementation
        }
    }

3. how code is executed inside JVM:
    suppose we have a structure like this : 
    
    class Abc {
        int num = 1; // this will be called as an instance variable.

        public int add(int a, int b) { // these a and b will be the local variables.
            return a+b;
        }

    }
    
    class Main {
        public static void main(String a[]) {
            Abc obj1 = new Abc();
            Abc obj2 = new Abc();

            obj1.num = 5;
            System.out.println(obj1.num); // output : 5
            System.out.println(obj2.num); // output : 1
        }
    }

    stack and heap :
    * every function will be having its own stack.
    * heap will be having all the objects created from a class.
    * stack will be having key value pairs, where key will be the local variable of the function and value of the key will be the value fo the variable.
    * in case of objects, inside the stack, the value for the object key will be the address for that object inside the heap.

Array in Java:
1. to create an array in java we do it like this :
    int nums[] = {1,2,3}; // here nums is the name of the array.
    System.out.println(nums); // [1,2,3];

2. if we want to create an array dynamically we can do something like this :
    int nums[] = new int[4]; // this will create an array of length 4 with all the values as 0;
    System.out.println(nums); // [0,0,0,0];

3. suppose we have an array like this : 
    int nums[] = [1,2,3,4];

    if we want to print the entire array, we cannot do System.out.println. 
    we have to use for loop for printing each element of an array.
    eg :
        for(int i = 0;i<nums.length;i++){
            System.out.println(nums[i]);
        }

4. multidimensional array :
    1. creating 1D array :
        int num[] = {1,2,3,4};
    
    2. creating 2D array " 
        int num[][] = new int[3][4]; // this means the num array will be of lenght 3 and each element will be an array of lenght 4.

5. enhanced for loop:
    * For 1D array :
        int[] arr = { 1, 2, 3, 4, 5, 6 };
        for (int a : arr) {
                // here a will be each element of the arr array.
                System.out.println(a);
        }
    * For 2D array : 
        public static void main(String a[]) {
            int nums[][] = new int[3][4];
            for(int num[] : nums) {
                for(int num2 : num){
                    System.out.print(num2+" ");
                }
                System.out.println("");
            }
        }