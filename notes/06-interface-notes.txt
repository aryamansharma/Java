1. interfaces are used to create the shape of an object.
    * suppose we have a class in which there are only abstract methods in that case instead of creatign a class, we can create an interface.
    * every method in the interface needs to have the implementation in the class which implements this interface.
    * we can also store declare variables in an interface but the value of those variables will be static and final.
    * by default all the methods in an interface are public abstract. we dont need to write these keywords explicitly.
    * just like abstract class, we can not create an object of an interface, but the shape of that object can be of the type interface.

    interface A {
        void show();
        void config();
    }

    class B implements A {
        public void show() {
            System.out.println("in show");
        }

        public void config() {
            System.out.println("in config");
        }
    }

    class Main {
        public static void main(String a[]) {
            A obj = new B();
            obj.show(); // output = in show
            obj.config(); // output = in config
        }
    }

2. a class can implement multiple interfaces : 
    interface X {
        void run();
    }

    interface A {
        void show();
        void config();
    }

    class B implements A,X {
        public void show() {
            System.out.println("in show");
        }

        public void config() {
            System.out.println("in config");
        }

        public void run() {
            System.out.println("in run");
        }
    }

    class Main {
        public static void main(String a[]) {
            A obj = new B();
            obj.show(); // output = in show
            obj.config(); // output = in 
            
            // for running the run method we need to give the shape of the object as X interface because A interface dont have any idea of run method.
            X obj1 = new B();
            obj.run(); // output = in run
        }
    }

3. inheritance can also be implemented in interfaces :
     interface X {
        void run();
    }

    interface A extends X {
        void show();
        void config();
    }

    class B implements A {
        public void show() {
            System.out.println("in show");
        }

        public void config() {
            System.out.println("in config");
        }

        public void run() {
            System.out.println("in run");
        }
    }

    class Main {
        public static void main(String a[]) {
            A obj = new B();
            obj.show(); // output = in show
            obj.config(); // output = in 

            // now we dont need to create an another object with type X
            obj.run(); // output = in run
        }
    }

4. there are 3 different types of interfaces : 
    1. normal interace : a type of interace with 2 or more than 2 methods.

    2. functional/SAM(Signle Abstract Method) interface : a type of interface with just 1 method.

    3. marker interace : an interface with 0 methods. these type of interface is used to implement serialization or deserialization.
        * serialization is a concept where we can store object values on our hard drive.
        * deserialization is a concept where we can retrieve object values from our hard drive.

5. functional / SAM (Sinlge Abstract Method) interace : we can implement the method of a function interface using anonymous inner class -
    
    // if we want to create a functional interface we can use the FunctionalInterface annotation to reduce the error,
        because suppose we dont use this annotation and we wanted to create function interface and by mistake we add another method in this interface,
        it will throw an error, but if we use this annotation, it will throw an error.

    @FunctionalInterface
    interface A {
        void show();
    }

    class Main() {
        public static void main(String a[]) {
            A obj = new A() 
            {
                public void show("in A interface show");
            };
        }
    }
 
6. lambda expression ( -> ) : we can use lambda expression only with function interface and we create an anonymous inner class. 
    * it is used to reduce the size of the code.

    @FunctionalInterface
    interface A {
        void show();
    }

    class Main {
        public static void main(String a[]) {
            A obj = () -> {
                System.out.println("in A interace show");
            }; // here if we just want to execute this 1 line of code, we can also remove these curly braces.
            obj.show();
        }
    }

    * in case we want to pass paramters to the method wwe can do something like this : 

    @FunctionalInterface
    interface A {
        void show(int num);
    }

    class Main {
        public static void main(String a[]) {
            // for just single paramter we can also even remove () before the -> (lambda expression) 
            // we also dont need to specify the type of the paramter while implementing this method
            A obj = num -> System.out.println("in A interace show"+num);
            obj.show(5);
        }
    }

    * in case the method is return something we can do something like this :

    @FunctionalInterface
    interface A {
        void add(int i, int j);
    }

    class Main {
        public static void main(String a[]) {
            // in case we are returning something in just 1 line we dont need to specify the return keyword, 
            // and we dont need to specify the curly braces as well.
            A obj = (i,j) -> i+j; 
            obj.add(5,6);
        }
    }

