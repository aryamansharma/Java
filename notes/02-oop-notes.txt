OOP in Java :
1. classes and objects in Java :
    * For every method we need to provide access modifiers.

    class Calculator {

        // this int here is the return type of this method.
        public int add(int n1, int n2) {
            int result = n1+n2;
            return 
        }
        
        // if we dont a method to return anything we use void, like this
        public void play(){ // this method will return anything

        }

        // if we want to specify the return type as String for a method, we use it like this
        public String abc() { // this String we use to specify the return of this method

        }
    }

    public class Demo {
        public static void main(String a[]) {
            int num1 = 1;
            int num2 = 2;

            // this is how we create an object of a class in Java.
            // this Calculator will be the type of the variable(object in this case).
            // calc will be the object or we can say it will be a reference variable.
            // new Calculator() will be used to create object of this Calculator class.
            Calculator calc = new Calculator();
            int result = calc.add(num1+num2);
            System.out.println(result);
        }
    }

    * anonymous object :
     class Calculator {
    }
     public class Demo {
        public static void main(String a[]) {
            int num1 = 1;
            int num2 = 2;

            // this is anonymous object.
            new Calculator(); 
            // this is not usefull because we cannot use it further.
        }
    }

2. method overloading : when we have 2 implementation of a method with the exact same name, 
    the only difference will be between the paramenters adn the type of paramenters.

    class Abc {
        public int add(int a, int b, int c) {
            return a+b+c;
        }
        public int add(int a, int b) {
            return a+b;
        }
    }

    class Main {
        public static void main(String a[]) {
            Abc obj = new Abc();
            obj.add(1,2,3); //this will call the 1st implementation
            obj.add(1,2); // this will call the 2nd implementation
        }
    }

3. how code is executed inside JVM:
    suppose we have a structure like this : 
    
    class Abc {
        int num = 1; // this will be called as an instance variable.

        public int add(int a, int b) { // these a and b will be the local variables.
            return a+b;
        }

    }
    
    class Main {
        public static void main(String a[]) {
            Abc obj1 = new Abc();
            Abc obj2 = new Abc();

            obj1.num = 5;
            System.out.println(obj1.num); // output : 5
            System.out.println(obj2.num); // output : 1
        }
    }

    stack and heap :
    * every function will be having its own stack.
    * heap will be having all the objects created from a class.
    * stack will be having key value pairs, where key will be the local variable of the function and value of the key will be the value fo the variable.
    * in case of objects, inside the stack, the value for the object key will be the address for that object inside the heap.

4. encapsulation : meaning hiding the data and methods from other parts of the program.
    * we can use getters and setters to implement encapsulation.
    * instance variable should always be private.

    class Human {
        private int age;
        private String name;

        // getter for age
        public getAge() {
            return this.age;
        }

        // setter for age
        public setAge(int age) {
            this.age = age;
        }
    }

    class Demo {
        public static void main(String a[]) {
            Human obj = new Human();
            obj.setAge(25);
            System.out.println(obj.getAge());
        }
    }

5. In java if we do something like this:
    class Human {
        private int age;
        private String name;

        public Human(int a, String n) {
            age = age;
            name = name;

            // this assignment without this keyword is valid, 
            but we should not do this because arguements and instance variables can have same name,
            so in that case it will not assign the value to the instance variables.
        }
    }

    class Demo {
        public static void main(String a[]) {
            Human obj = new Human(25,"Aryaman");
        }
    }

6. this keyword works in java just like Javascript.

7. constructor : constructor of class will always run whenver we create an object of that class.
    * syntax : 

    class Human {
        private int age;
        private String name;

        // this is a constructor. the name of the constructor will be same as the class in Java.
        // this is known as a default constructor. it will always be present in the class, even if you dont define one yourself.
        public Human() {

        }
    }

    * we can overload constructor as as well :
      class Human {
        private int age;
        private String name;

        public Human() {

        }

        // these are called parameterized constructors.
        public Human(int age, String name) {
            this.age = age;
            this.name = name;
        }
    }

8. inheritance : 
    // this Calc will be the super class or parent class or base class
    class Calc {
        public int add(int num1, int num2) {
            return num1+num2;
        }
        public int sub(int num1, int num2) {
            return num1-num2;
        }
    }

    // this AdvanceCalc will be the sub class or child class or derived class
    class AdvanceCalc extends Calc {
        public int multi(int num1, int num2) {
            return num1*num2;
        }
        public int division(int num1, int num2) {
            return num1/num2;
        }
    }

    class Main {
        public static void main(String a[]) {
            AdvanceCalc obj = new AdvanceCalc();

            // even though add method is not defined in the AdvanceCalc class, we can still use it due to inheritance.
            obj.add(2,3);

            if we do something like this :
            Calc obj2 = new Calc();
            obj2.multi(2,3); // this will not work
        }
    }

9. types of inheritance : 
    1. single inheritance :  when there is just 1 parent class and 1 child class.
    2. multilevel inheritance :
        when we have a parent class and we derived a class from that class, 
        and then we again derive a class from the already derived class and so on, this is multilevel inheritance.
    3. multiple inheritance : when there are 2 parent class of a single child class.
        * in java multiple inheritance is not possible, because of ambiguity problem, which stated that :
            * suppose we have 2 parent classes and a single child class derived from those 2 parent classes and we create an object of that child class,
            and we use that object to call a method named x() and that method is not present in the child class but it is present in both the parent classes,
            so compiler will get confuse which x() method to call, so that is why multiple inheritance is not possible in java.

10. this() method and super method() :
    1. this() method is used to execute the constructor of that class.
    2. super() method is used to execute the constructor of the parent class.

    eg :

    // all the classes in java will extend Object whether you mention it or not.
    class A extends Object {

        public A() {
            // all the constructors of a class will having this super() method and will be the 1 call first in a constructor.
            super(); // this will call the constructor of the Object class
            System.out.println("A default constructor");
        }

        public A(int n) {
            super();
            System.out.println("A parameterized constructor");
        }
    }

    class B extends A {
        public B() {
            super(5); // this way we can call the parameterized constructor of the parent class.
            this(5); // this will the parameterized constructor of this class.
            System.out.println("B default constructor");
        }

        public B(int n) {
            super();
            this(); // this method is will execut the constructor of the same class. 
            System.out.println("B parameterized constructor");
        }
    }

    class Main {
        public static void main(String a[]) {
            B obj = new B(); // creating an object of B
        }
    }

11. method overriding : 
    * suppose we have a method with exact same name in both the parent class and in child class as well,
    and we create an object of child class and call that method , so the method of child class will be executed.
    this is method overriding.
    if we dont have the method in our child class but in our parent class, then the parent class method will be executed.

12. access modifiers : access modifiers are used to give protectection to instance variable and methods of a class. 
    they are of 4 types:

    1. default : where we dont provide any access modifiers to an instance variable of method. but it is not recommended. 
    we should always give access modifiers to instance variables and methods.
        code :
        class A {
            int marks;
        }

        * they are accesible within the same class, same package subclass and same package non-subclass only.

    2. public : public variables or methods can be accessible from anywhere.
    
    3. protected : private variables and methods can be accessible in the same, same package subclass, 
        same package non-subclass and different package subclass.

    4. private :  protected variables and methods can be accessible in the same class only.

    Note : we should always make instance variables private and methods as public.

13. polymorphism : it simply means same name but different form. there are 2 tyes of polymorphism : 
    1. compile time polymorphism : method overloading is a type of compile time polymorphism.
    2. run time polymorphism : mthod overriding is a type of run time polymorphism.
    
    * dynamic method dispatch : Dynamic method dispatch is the mechanism by which a call to an overridden method is resolved at run time, 
        rather than compile time
     suppose we have 2 classes like this :
        class A {
            public void show() {
                System.out.println("in A show");
            }
        }

        class B extends A {
            public void show() {
                System.out.println("in B show");
            }
        }

        class Main {
            public static void main(String a[]) {
                A obj = new A();
                obj.show(); // output : in A show.

                // this is dynamic method dispatch. basically we can reassign the object of a parent class to a child class.
                obj = new B();
                obj.show(); // // output : in B show.
            }
        }

        Note: this is only possible in inheritance. without inheritance it is not possible.

14. final keyword in java :
    1. final variables : when we make a variable as final, that variable will be a constant then. 
        we cannot change the value of that variable again.

        class A {
            final int age = 9;
            age = 5; // will throw and error.

            final int num; // this will also throw an error because we need to initialize the final variable.
        }

        class Main {
            public static void main(String a[]) {
                A obj = new A();
            }
        }

    2. final class : when we make a class, that class cannot inherited or we can say we cannot create a subclass of that class.

        final class A {
            int num=9;
        }

        class B extens A { // not allowed

        }

        class Main {
            public static void main(String a[]) {
                A obj = new A();
            }
        }

    3. final method : final method cannot be overridden.

         class A {
           public final void show () {
            System.out.println("A show method");
           }
        }

        class B extends A {
            public void show () { // this is not allowed
            System.out.println("B show method");
           }

        }

        class Main {
            public static void main(String a[]) {
                A obj = new A();
            }
        }

15. string will have a method equal() to compare 2 strings.

16. we can cast objects just like type casting:
    suppose we have 2 classes : 
        class A {
            public void showA() {
                System.out.println("in A show");
            }
        }

        class B extends A {
            public void showB() {
                System.out.println("in B show");
            }
        }

        class Main {
            public static void main(String a[]) {

                // this is upcasting, basically we are casting class child object to parent class object.
                A objA = new B();

                objA.showA(); // this will work

                // now even though this objA object is of class B, it will not be having showB() method.
                // to solve this problem we can do downcasting:

                // this is downcasting
                objB = (B) objA;
                //now we can call showB() method.

            }
        }

17. wrapper classes in java : in java for every primitive type we have a wrapper class for eg : for int we have Integer wrapper class etc.
    wrapper classes extends the Object class.
    this extends the functionality of primitive types.

    class Main {
        public static void main(String a[]) {
            int num = 1;
            Integer num1 = new Integer(num); // there is no need for this step now.
            Integer num1 = num; // this step is called autoboxing where we directly assign the primitive type to an object type.

            String str = "12";
            // to convert this string into number we can use Integer Wrapper class.

            System.out.println(Integer.parseInt(str));

            int num4 = num1; // this step is called auto-unboxing where we directly assign the object type to an primitive type.
        }
    }
    
18. abstract keyword : suppose we have a situation where we dont know the implementation of a method,
     but we want the extended classes to have that implementation in that we case we can use the concept of abstract.

    // this is an abstract class
    abstract class Car {

        // this is an abstract method
        // we can also say we are just declaring this method here and then the extended class will implement this method
        // we simply just declare this method in the abstract class and the extended class will have the implementation.
        public abstract void drive();

        public void playMusic() {
            System.out.println("playing music");
        }
    }

    // this is a non abstract class and this is called a concrete class
    class Ferrari extends Car {
        public void drive() {
            System.out.println("driving");
        }
    }

    class Main {
        public static void main(String[] args) {
            // we cannot create an object of an abstract class but the type of that object can be of an abstract class.
            Car car = new Ferrari();
            car.drive();
            car.playMusic();
        }
    }

    1. we can create an abstract class with abstract keyowrd.
    2. we can create an abstract method with abstract keyowrd.
    2. we cannot create an object of an abstract class.
    3. an abstract class contain abstract and normal methods as well,
        but we cannot create an abstract method inside a concrete(non-abstract) class.
    4. every abstract method implementation should always be in the extended class.

19. inner class : we can create a class inside a class like this :
    class A {
        int age;

        class B {
            public void show(){
                System.out.println("inner class");
            }
        }
    }

    class Main {
        public static void main(String a[]){
            A objA = new A();
            A.B objB = objA.new B(); // this is how we create an object of an inner class.
            objB.show();
        }
    } 




