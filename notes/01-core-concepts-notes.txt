core Java:
1. to print we use System.out.print();
2. semi-colon at the end is important;
3. whenever we want to print string we pass them in double quotes("") not in single quotes('');
    eg : 
        * System.out.print('hello world'); // Not acceptable.
        * System.out.print("Hello world"); // acceptable.
4. to run java code there are 2 steps : // make sure to run these 2 commands in the folder where your Java file is.
    1. compile : javac filename.java
    2. run : java classname // without file extension
5. structure of a Java program : 
    class Hello { // classname should always be starting with capital
    public static void main(String a[]) { // this String argument is very important
            System.out.print("hello workd");
        }
    }

6. How a Java code is run : 
    1. we write the code in Java.
    2. that java code is converted to byte code by compiler when we run javac filename.java
    3. after compilation a file is created with classname of the class containing the main method.
    4. run java classname
    5. that code is executed on JVM, which is installed in our machine.

7. some core points about Java : 
    1. Java is platform independent.
    2. JVM is platform dependent.
    3. the main method is entry point of a code which is required by JVM, without this main method the code will not run. 
        this is like a starting point of our program.
    4. basically a device hardware will be having the OS,
        and on that OS we install JDK which will be containing JRE(Java Runtime Environment) which will be containg the JVM.
    5. JRE contains JVM and libraries and Runtime.

8. difference between print and println is that println prints the output in a different line while print prints the output in a single line.
    for eg : 
        for println : 
            System.out.println("Hello world!");  
            System.out.println("Hello world!");
        output : 
            Hello world!
            Hello world!
        for print : 
            System.out.print("Hello world!");
            System.out.print("Hello world!");
        output : 
            Hello world!Hello world!

9. Data types:
    primitive data types : 
        1. integers :
            integer types : int, byte, short, long
            NOTE : while workign with long we need to put 'l' at the end,
                like this : long num = 1223l;
        2. float : 
            float types : double, float
            NOTE : while working with float type values, double is the default data type for Java. 
                    double num = 5.6; // this is valid
                    float num = 5.6; // this is invalid  
                so if you want to create a variable with float data type, you have to do something like this :
                    float num = 5.6f;
        3. characters : it can only store a single character.
            character type : char
            NOTE : char only accepts single quotes(''), it will not accept double quotes(""), they are for strings.
        4. boolean :
            boolean type : bool
            NOTE : boolean only accepts true and false, no 1 or 0.

        Note : primitive data types always starts with small characters like, int, char, bool, long etc.
    
10. Literals: literals are just values of a variable.
    1. int a = 10_00_000; // this is valid in Java.
        System.out.println(a);
        output : 1000000;
    
    2. public static void main(String[] args) {
        char c = 'a';
        c++; // this c++ will increment the 'a' to 'b';
        System.out.println(c++); // this c++ will increment the 'b' to 'c';
        System.out.println(c);
        }

    3. if we do something like this : 
        public static void main(String[] args) {
            double num = 56;
            System.out.println(num);
        }

        output : 56.0 // double will convert the 56 to 56.0;

11. type casting and conversion :
    1. when we explicitly convert the type it is known as type casting.
        eg : byte a = 2;
             int b = 1;
             a=b; // this will not work byte range is smaller than int.
             a = (byte) b; // type casting
             b=a; // this will work because byte range is smaller than int.
    2. when we implicitly convert the type it is known as type conversion.
            byte a = 2;
            int b = 1;
            b=a; // type conversion.
    3. type promotion : when automatically converts the type of a lower data type type to higher data type while evaluating an expression : 
        byte a = 10;
        byte b = 30;
        int result = a * b; // this will give 300 of int because of type promotion.

    Note : 
        1.
            float num = 5.6f;
            int a = 5;
            a = num; // this will throw an error because we cannot assign a float value to an int.
            a = (int) num; type casting. 
            System.out.println(a);
            output : 5; // it will lose the decimal part of the number.  
        2.    
            byte a = 2;
            int b = 257;
            a = (byte) b;
            System.out.println(a);
            output : 1 // because it will perform a modulus operation with 256.

12. relational operators : 
    1. for equality check we use : '=='
        eg : int a = 1;
             int b = 2;
             System.out.println(a==b); 
             output : true;

13. if else :

    1. Java is not an identation depent language.
    2. if we have 1 line of code to execute in an if or else block we can skip curly braces but if we have more than line of code in any of the if or else block we need to use curly braces. just like Javascript
        eg : 

            if(true) System.out.println('a');
            else System.out.println('b');

            if(true) {
                System.out.println('a');
                System.out.println('b');
            } else {
                System.out.println('c');
                System.out.println('d');
            }

14. default value of int is 0 and of string is null.

15. packages : we use the concept of packages in java to basically divide our project into folders,
    * package tools; //this means there will be a folder with name 'tools' containing this class A.
        class A {
        }

    * importing a class from package : 
        import tools.calc.A; // meaning we want class A which is inside a package or folder 'calc' which is inside 'tools'.

    * importing all classes from a package : 
        import tools.clalc.*; // this means it will give us all the files not folder inside calc folder.

    * every inbuilt class is part of a package in java. eg:
        import java.lang.*; // this contains the System class and String class etc. we dont need to import it, it is by default imported.

16. for taking user input we use Scanner class like this:

    // Scanner is in thisr package. we need to import it.
    import java.util.Scanner;

    public class Main {

        public static void main(String a[]) {
            // this step is important
            Scanner sc = new Scanner(System.in); 

            String ans = sc.nextLine(); // this nextLine will get the user input and will store it in the ans variable.
            // the return type of this nextLine() is String. 
            // we have different methods for returning different types such as nextInt() will return int type.

        }   
    }

17. annotations : we use annotations to describe what we are trying to do, in compile time. basically we provide the meta data of our cude using annotations.
    class A {
        public void show() {
            System.out.println("Hello");
        }
    }

    class B extends A {
        @Override // this is an annotation, which is telling the compiler that we are overriding this method. 
                  // if we dont define a method in the parent class with the same name, than it will throw an error, if we dont use Override annotation.
        public void show() {
            System.out.println("Hello");
        }
    }

    class Main {
        public static void main(String a[]) {
            B obj = new B();
            obj.show();
        }
    }

18. exceptions : exceptions are also known as Runtime errors.

    class Main {
        public static void main(String a[]) {
            try {

            } 
            catch (Exception e) { 
                // e is the object of type Exception class. if try block fails then catch block will be executed, 
                    otherwise the catch block will not be executed

            }
        }
    }

20. in java we can use multiple catch block for a single try block, so that we can handle different types of exceptions.
     class Main {
        public static void main(String a[]) {
            int[] num = new int[5];
            try {
                System.out.println(4/0); // for this ArithmeticException catch block will be executed
                System.out.println(num[5]); // for this ArrayIndexOutofBoundsException catch will be executed
            } 
            catch(ArithmeticException e) {

            }
            cathc (ArrayIndexOutofBoundsException e) {

            }
            catch (Exception e) { 
                

            }

            // this is the structure we follow to handle different types of exceptions, basically Exception is the parent class of ArithmeticException class
                and ArrayIndexOutofBoundsException class. and also we should always use Exception class block in the end of all blocks because sometimes even we are 
                not sure what kind of exception can occur, so this block will handle all types of exception.
            
            // suppose at a line an exception is thrown in the try block, so in the try block rest of the code is not executed.
        }
    }

21. exception hierarchy : 
    Object class => Throwable class => Error class 
                                    ||
                                    ||
                                    => Exception class => RuntimeException class => ArithmeticException class
                                    ||                                           ||
                                    ||                                           => ArrayIndexOutofBoundsException class and many other class extends RuntimeException class.           
                                    ||
                                    ||
                                    ||
                                    ||
                                    => SQLException class
                                    ||
                                    => IOException class


    * RuntimeException class is also known as unckecked errors, 
        and other classes of Exception class are known as checked errore, meaning we need to handle them    